#
# american fuzzy lop - LLVM instrumentation
# -----------------------------------------
#
# Written by Laszlo Szekeres <lszekeres@google.com> and
#            Michal Zalewski <lcamtuf@google.com>
#
# LLVM integration design comes from Laszlo Szekeres.
#
# Copyright 2015, 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#

PREFIX      ?= /usr/local
HELPER_PATH  = $(PREFIX)/lib/afl
BIN_PATH     = $(PREFIX)/bin

VERSION     = $(shell grep '^\#define VERSION ' ../config.h | cut -d '"' -f2)

ifeq ($(LLVM_CONFIG),)
  $(error LLVM_CONFIG is not set)
endif

CFLAGS      ?= -O3 -funroll-loops
CFLAGS      += -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign \
               -DAFL_PATH=\"$(HELPER_PATH)\" -DBIN_PATH=\"$(BIN_PATH)\" \
               -DVERSION=\"$(VERSION)\" 

ifdef AFL_TRACE_PC
  CFLAGS    += -DUSE_TRACE_PC=1
endif

CXXFLAGS    ?= -O3 -funroll-loops
CXXFLAGS    += -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign \
               -DVERSION=\"$(VERSION)\" -Wno-variadic-macros \
               -D__BASE_FILENAME__=\"$(<F)\"


CLANG_CFL    = `$(LLVM_CONFIG) --cxxflags` -fno-rtti -fpic $(CXXFLAGS)
CLANG_LFL    = `$(LLVM_CONFIG) --ldflags` $(LDFLAGS)
LLVM_VERSION = `$(LLVM_CONFIG) --version`
LLVM_VERSION_MAJOR = $(shell echo $(LLVM_VERSION) | cut -d'.' -f1)
LLVM_VERSION_MINOR = $(shell echo $(LLVM_VERSION) | cut -d'.' -f2)

# https://gitlab.com/laf-intel/laf-llvm-pass/tree/master/src
ENABLE_LAF_INTEL = 0

# User teor2345 reports that this is required to make things work on MacOS X.

ifeq "$(shell uname)" "Darwin"
  CLANG_LFL += -Wl,-flat_namespace -Wl,-undefined,suppress
endif

# We were using llvm-config --bindir to get the location of clang, but
# this seems to be busted on some distros, so using the one in $PATH is
# probably better.

ifeq "$(origin CC)" "default"
  CC         = `$(LLVM_CONFIG) --bindir`/clang
  CXX        = `$(LLVM_CONFIG) --bindir`/clang++
endif

# 
ifndef AFL_TRACE_PC
  SHARED_LIBS= ../strings-in-calls.so ../select-to-branch.so ../afl-llvm-pass-no-collision.so ../afl-llvm-pass-original.so ../compare-to-unit.so ../strcompare-to-unit.so
  ifeq ($(ENABLE_LAF_INTEL),1)
  	# Note: because the switch statement are already converted to if-statements, I don't compile the split-switches-pass.so.cc
  	SHARED_LIBS += ../compare-transform-pass.so ../split-compares-pass.so
  endif
  PROGS      = $(SHARED_LIBS) ../afl-clang-fast utils.o ../afl-llvm-rt.o ../afl-llvm-rt-32.o ../afl-llvm-rt-64.o
else
  SHARED_LIBS=
  PROGS      = ../afl-clang-fast ../afl-llvm-rt.o ../afl-llvm-rt-32.o ../afl-llvm-rt-64.o
endif

all: create_common test_deps $(PROGS) test_build all_done

test_deps:
ifndef AFL_TRACE_PC
	@echo "[*] Checking for working 'llvm-config'..."
	@which $(LLVM_CONFIG) >/dev/null 2>&1 || ( echo "[-] Oops, can't find 'llvm-config'. Install clang or set \$$LLVM_CONFIG or \$$PATH beforehand."; echo "    (Sometimes, the binary will be named llvm-config-3.5 or something like that.)"; exit 1 )
else
	@echo "[!] Note: using -fsanitize=trace-pc mode (this will fail with older LLVM)."
endif
	@echo "[*] Checking for working '$(CC)'..."
	@which $(CC) >/dev/null 2>&1 || ( echo "[-] Oops, can't find '$(CC)'. Make sure that it's in your \$$PATH (or set \$$CC and \$$CXX)."; exit 1 )
	@echo "[*] Checking for '../afl-showmap'..."
	@test -f ../afl-showmap || ( echo "[-] Oops, can't find '../afl-showmap'. Be sure to compile AFL first."; exit 1 )
	@echo "[+] All set and ready to build."

create_common:
ifneq "$(LLVM_VERSION_MAJOR)" "3"
	@echo "[X] Error: only LLVM version supported is 3.8 "
	@exit 1
endif

ifneq "$(LLVM_VERSION_MINOR)" "8"
	@echo "[X] Error: only LLVM version supported is 3.8 "
	@exit 1
endif
	@echo "/* WARNING: automatically generated by Makefile */"
	@echo "#pragma once" > common.h
	@echo >> common.h
	@echo "#include \"utils.h\"" >> common.h
	@echo >> common.h
	@echo "#define S2U_DICT \"S2U.Dict\"" >> common.h
	@echo "#define C2U_DICT \"C2U.Dict\"" >> common.h
	@echo "#define SIC_DICT \"SIC.Dict\"" >> common.h
	@echo "#define LLVM_VERSION_MAJOR $(LLVM_VERSION_MAJOR)" >> common.h
	@echo "#define LLVM_VERSION_MINOR $(LLVM_VERSION_MINOR)" >> common.h
	@echo "#define LLVM_VERSION(major, minor) (((major) << 8) | (minor))" >> common.h
	@echo "#define LLVM_VERSION_CODE LLVM_VERSION(LLVM_VERSION_MAJOR, LLVM_VERSION_MINOR)" >> common.h


../afl-clang-fast: afl-clang-fast.c utils.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CC) $(CFLAGS) $< -o $@ $(LDFLAGS)
	ln -sf afl-clang-fast ../afl-clang-fast++
	ln -sf aflc-gclang ../aflc-gclang++
	ln -sf aflc-gclang ../aflc-gclang-cov
	ln -sf aflc-gclang ../aflc-gclang-cov++
	ln -sf aflc-clang-fast ../aflc-clang-fast++
	ln -sf compile_program.sh ../compile_program++.sh

# ../afl-llvm-aa.so: afl-llvm-aa.so.cc | test_deps
# 	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

# laf-intel
../compare-transform-pass.so: compare-transform-pass.so.cc | test_deps
	$(CXX) $(CLANG_CFL) -shared $< -o $@ $(CLANG_LFL)
../split-compares-pass.so: split-compares-pass.so.cc | test_deps
	$(CXX) $(CLANG_CFL) -shared $< -o $@ $(CLANG_LFL)
# /laf-intel



../afl-llvm-pass-no-collision.so: afl-llvm-pass-no-collision.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

../afl-llvm-pass-original.so: afl-llvm-pass-original.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

../select-to-branch.so: select-to-branch.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

../strings-in-calls.so: strings-in-calls.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

../compare-to-unit.so: compare-to-unit.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

../strcompare-to-unit.so: strcompare-to-unit.so.cc utils.o afl-llvm-pass-parent.o | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -shared $^ -o $@ $(CLANG_LFL)

afl-llvm-pass-parent.o: afl-llvm-pass-parent.cc | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -fPIC -c $< -o $@
	
utils.o: utils.cc | test_deps
	LLVM_VERSION_MAJOR=$(LLVM_VERSION_MAJOR) LLVM_VERSION_MINOR=$(LLVM_VERSION_MINOR) $(CXX) $(CLANG_CFL) -fPIC -c $< -o $@

../afl-llvm-rt.o: afl-llvm-rt.o.c | test_deps
	$(CC) $(CFLAGS) -fPIC -c $< -o $@

../afl-llvm-rt-32.o: afl-llvm-rt.o.c | test_deps
	@printf "[*] Building 32-bit variant of the runtime (-m32)... "
	@$(CC) $(CFLAGS) -m32 -fPIC -c $< -o $@ 2>/dev/null; if [ "$$?" = "0" ]; then echo "success!"; else echo "failed (that's fine)"; fi

../afl-llvm-rt-64.o: afl-llvm-rt.o.c | test_deps
	@printf "[*] Building 64-bit variant of the runtime (-m64)... "
	@$(CC) $(CFLAGS) -m64 -fPIC -c $< -o $@ 2>/dev/null; if [ "$$?" = "0" ]; then echo "success!"; else echo "failed (that's fine)"; fi

test_build: $(PROGS)
	@echo "[*] Testing the CC wrapper and instrumentation output..."
	unset AFL_USE_ASAN AFL_USE_MSAN AFL_INST_RATIO; AFL_BUILD_TYPE=FUZZING AFL_DICT_TYPE=NORMAL AFL_COVERAGE_TYPE=ORIGINAL AFL_CONVERT_COMPARISON_TYPE=NONE AFL_QUIET=1 AFL_PATH=. AFL_CC=$(CC) ../aflc-clang-fast $(CFLAGS) ../test-instr.c -o test-instr $(LDFLAGS)
	echo 0 | ../afl-showmap -m none -q -o .test-instr0 ./test-instr
	echo 1 | ../afl-showmap -m none -q -o .test-instr1 ./test-instr
	@rm -f test-instr
	@cmp -s .test-instr0 .test-instr1; DR="$$?"; rm -f .test-instr0 .test-instr1; if [ "$$DR" = "0" ]; then echo; echo "Oops, the instrumentation does not seem to be behaving correctly!"; echo; echo "Please ping <lcamtuf@google.com> to troubleshoot the issue."; echo; exit 1; fi
	@echo "[+] All right, the instrumentation seems to be working!"

all_done: test_build
	@echo "[+] All done! You can now use '../afl-clang-fast' to compile programs."

.NOTPARALLEL: clean

clean:
	rm -f *.o *.so *~ a.out core core.[1-9][0-9]* test-instr .test-instr0 .test-instr1 
	rm -f $(PROGS) ../afl-clang-fast++
